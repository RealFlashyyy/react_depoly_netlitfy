
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://swxlsxjqjpygcggqluyf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN3eGxzeGpxanB5Z2NnZ3FsdXlmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ2MTQwMDMsImV4cCI6MjA2MDE5MDAwM30.sro79jlFemsI-19z24YMOdIUTbJU1r8Xus6iDIHL98c";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true
    },
    global: {
      headers: {
        'Content-Type': 'application/json'
      }
    },
    db: {
      schema: 'public'
    },
    realtime: {
      params: {
        eventsPerSecond: 2 // Reduced from 10 to limit event frequency
      }
    }
  }
);

// Helper function for quiz submission with detailed error logging
export const submitQuizWithLogging = async (submissionData) => {
  console.log("Submitting with helper function, data:", submissionData);
  
  try {
    // First attempt with standard insert
    const { data, error } = await supabase
      .from('quiz_submissions')
      .insert(submissionData);
    
    if (error) {
      console.error("Quiz submission error details:", error);
      throw error;
    }
    
    // After successful submission via normal method, update the quiz attempts count
    try {
      if (submissionData.quizid) {
        // Call the increment_quiz_attempts function to safely increment the attempts count
        const { data: incrementResult, error: updateError } = await supabase
          .rpc('increment_quiz_attempts', { quiz_id: submissionData.quizid });
          
        if (updateError) {
          console.warn("Could not update attempts count:", updateError);
        } else {
          console.log("Quiz attempts updated to:", incrementResult);
        }
      }
    } catch (updateError) {
      console.warn("Error updating attempts count:", updateError);
    }
    
    return { success: true, data };
  } catch (err) {
    console.error("Exception during quiz submission:", err);
    
    // Try alternate approach with REST call as fallback
    try {
      console.log("Attempting direct REST API call as fallback");
      const response = await fetch(`${SUPABASE_URL}/rest/v1/quiz_submissions`, {
        method: 'POST',
        headers: {
          'apikey': SUPABASE_PUBLISHABLE_KEY,
          'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
          'Content-Type': 'application/json',
          'Prefer': 'return=minimal'
        },
        body: JSON.stringify(submissionData)
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error("REST fallback failed:", response.status, errorText);
        throw new Error(`REST fallback failed: ${response.status} ${errorText}`);
      }
      
      console.log("REST fallback successful");
      
      // After successful submission via REST fallback, update the quiz attempts count
      try {
        if (submissionData.quizid) {
          // Call the increment_quiz_attempts function to safely increment the attempts count
          const { data: incrementResult, error: updateError } = await supabase
            .rpc('increment_quiz_attempts', { quiz_id: submissionData.quizid });
            
          if (updateError) {
            console.warn("Could not update attempts count via RPC:", updateError);
            
            // Fallback to direct update if RPC fails
            const { data: currentQuiz, error: fetchError } = await supabase
              .from('quizzes')
              .select('attempts')
              .eq('id', submissionData.quizid)
              .single();
              
            if (!fetchError && currentQuiz) {
              const newAttempts = (currentQuiz.attempts || 0) + 1;
              await supabase
                .from('quizzes')
                .update({ attempts: newAttempts })
                .eq('id', submissionData.quizid);
            }
          }
        }
      } catch (updateError) {
        console.warn("Error updating attempts count:", updateError);
      }
      
      return { success: true };
    } catch (restError) {
      console.error("All submission attempts failed:", restError);
      throw restError;
    }
  }
};
